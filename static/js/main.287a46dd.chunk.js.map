{"version":3,"sources":["components/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newRandomQuote","e","quotes","state","setState","randomQuote","Math","floor","random","length","isLoaded","_this2","Axios","get","then","res","data","_this$state$randomQuo","quote","author","react_default","a","createElement","className","style","marginTop","height","id","onClick","href","concat","encodeURIComponent","size","class","Component","App","components_QuoteBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRAwEeA,cApEd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAiBPQ,eAAiB,SAAAC,GAAK,IACbC,EAAWT,EAAKU,MAAhBD,OACRT,EAAKW,SAAS,CACbC,YAAaH,EAAOI,KAAKC,MAAMD,KAAKE,SAAWN,EAAOO,YAnBvDhB,EAAKU,MAAQ,CACZD,OAAQ,GACRQ,UAAU,EACVL,YAAa,IALIZ,mFASC,IAAAkB,EAAAf,KACnBgB,IAAMC,IACL,0IACCC,KAAK,SAAAC,GACNJ,EAAKP,SAAS,CAAEF,OAAQa,EAAIC,KAAKd,OAAQQ,UAAU,IACnDC,EAAKX,oDAWE,IAAAiB,EACkBrB,KAAKO,MAAME,YAA7Ba,EADAD,EACAC,MAAOC,EADPF,EACOE,OAEf,OADqBvB,KAAKO,MAAlBO,SAGNU,EAAAC,EAAAC,cAAA,OACCC,UAAU,0BACVC,MAAO,CAAEC,UAAW,MAAOC,OAAQ,SAEnCN,EAAAC,EAAAC,cAAA,OAAKK,GAAG,YAAYJ,WAAS,GAE5BH,EAAAC,EAAAC,cAAA,MAAIK,GAAG,OAAOJ,UAAU,eACtBL,GAEFE,EAAAC,EAAAC,cAAA,KAAGK,GAAG,SAASJ,UAAU,cAAzB,KACIJ,GAGJC,EAAAC,EAAAC,cAAA,UACCK,GAAG,YACHC,QAAShC,KAAKI,eACduB,UAAU,+BAHX,aAOAH,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,KACCK,GAAG,cACHE,KAAI,yDAAAC,OAA2DC,mBAC9D,IAAMb,EAAQ,OAASC,KAGxBC,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAAEQ,KAAM,KAAOC,MAAM,6BAO9B,YAjEcC,aCaRC,mLAVb,OACCf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAACc,EAAD,eALaF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.287a46dd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\n\r\nclass QuoteBox extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tquotes: [],\r\n\t\t\tisLoaded: false,\r\n\t\t\trandomQuote: {}\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tAxios.get(\r\n\t\t\t\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\r\n\t\t).then(res => {\r\n\t\t\tthis.setState({ quotes: res.data.quotes, isLoaded: true });\r\n\t\t\tthis.newRandomQuote();\r\n\t\t});\r\n\t}\r\n\r\n\tnewRandomQuote = e => {\r\n\t\tconst { quotes } = this.state;\r\n\t\tthis.setState({\r\n\t\t\trandomQuote: quotes[Math.floor(Math.random() * quotes.length)]\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { quote, author } = this.state.randomQuote;\r\n\t\tconst { isLoaded } = this.state;\r\n\t\tif (isLoaded) {\r\n\t\t\treturn (\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"card card-body bg-light\"\r\n\t\t\t\t\tstyle={{ marginTop: \"20%\", height: \"auto\" }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<div id=\"quote-box\" className>\r\n\t\t\t\t\t\t{}\r\n\t\t\t\t\t\t<h2 id=\"text\" className=\"text-center\">\r\n\t\t\t\t\t\t\t{quote}\r\n\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t\t<p id=\"author\" className=\"text-right\">\r\n\t\t\t\t\t\t\t- {author}\r\n\t\t\t\t\t\t</p>\r\n\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tid=\"new-quote\"\r\n\t\t\t\t\t\t\tonClick={this.newRandomQuote}\r\n\t\t\t\t\t\t\tclassName=\"btn btn-primary float-right\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tNew Quote\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\tid=\"tweet-quote\"\r\n\t\t\t\t\t\t\t\thref={`https://twitter.com/intent/tweet?hashtags=quotes&text=${encodeURIComponent(\r\n\t\t\t\t\t\t\t\t\t'\"' + quote + '\" - ' + author\r\n\t\t\t\t\t\t\t\t)}`}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<i style={{ size: 100 }} class=\"fab fa-twitter fa-lg\" />\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nexport default QuoteBox;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport QuoteBox from \"./components/QuoteBox\";\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<QuoteBox />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}